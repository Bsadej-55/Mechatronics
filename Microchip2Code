/*
 * Atmega328Pproject.c
 *
 * Created: 7/10/2024
 * Author : Team 1
 */ 

#include <avr/io.h>
#include <avr/interrupt.h>

// Clock Frequencies
#define FREQ_CLOCK 1000000

// Function Declarations
void wait (volatile int multiple, volatile char time_choice);
void delay_T_msec_timer0 (char choice);
void change_led_state(char initialstate);
void step_CW (void);
void step_CCW (void);

// Global Variables
char sensorvalue = 0;// value read from analog sensor (0-255 since we'll only read the upper 8 bits of the 10-bit number)
volatile int number_of_msec = 200;
volatile char register_B_setting;
volatile char timer_preload;
int phase_step = 1; // We will use wave stepping, so the steps are numbered 1-4, then will repeat.

int main(void)
{
	// Data Registries - IO
		// Follows a practice of making unused pins to be input (safer)
	DDRB = 0b00000001;
		// set bit PB0 as output for the green LEDs
		// set bits PB2-1 as inputs for the 2 switches
	DDRC = 0b11111111;
		// set bits as 7 segment display might need to fix for display
	DDRD = 0b11110000;
		// set PD2 and PD3 for interupts
		// set bits PD7-PD4 as output for the stepper motor

	// Ports - Set or Clear Bits for stepper motor
	PORTB = 0b00000001; // set output bits on PORTB so that all outputs are off (wired as active low)
	PORTC = 0b11111111; // set output bits on PORTC so that input is off (wired as active low)
	PORTD = 0b11110000; // set output bits on PORTD so that all outputs are off (wired as active low)

	// Set up interrupts
	EICRA = 1 << ISC01 | 1 << ISC00 | 1 << ISC11 | 1 << ISC10; // triggers INT0 and INT1 on rising edge
	EIMSK = 1 << INT1 | 1 << INT0; // enable INT1 and INT0
	sei(); // enable global interrupt

	while(1)
	{
		// Stepper Motor Chunk
		if(!(PINC & 0b00000001)){ // Stepper Motor if statement
			
			// Routine for Lab Assignment
			for(int i=0; i<36; i++){ // 270/7.5
				PORTB = PORTB & 0b00000010;
				step_CW(); //step_CW() // 7.5 degrees
				wait(56,2); // delay so that motor doesn't skip steps and makes it go for the full 2 seconds
			}
			
			PORTB = 0b00000011;
			wait(500,2); // delay so that motor doesn't skip steps
			
			for(int i=0; i<12; i++){ // 270/7.5
				PORTB = PORTB & 0b00000001;
				step_CCW(); //step_CCW()
				wait(83,2); // delay so that motor doesn't skip steps
			}
			
			PORTB = 0b00000011;
			wait(500,2); // delay so that motor doesn't skip steps
			
			for(int i=0; i<24; i++){ // 270/7.5
				PORTB = PORTB & 0b00000010;
				step_CW(); //step_CW()
				wait(83,2); // delay so that motor doesn't skip steps
			}
			
			PORTB = 0b00000011;
			wait(100,2); // delay so that motor doesn't skip steps
			
		} // end stepper motor if
	} // end main while

return 0;
} // end main function

//Interrupt Service Routine (ISR) for INT0 and INT1
ISR(INT0_vect) { // frick it, it works
	if(!(PORTC & 0b00000100)) { // checks switch 1 is closed (isn't open) at PC2
		if(PORTD & 0b01000000) { // checks LED6 is off at PD6
			PORTD = 0b10111111; // turns on LED at PD6
		}
	}
	wait(80); // switch debounce (waits to check switch pin status again - prevents the system perceiving double presses)
	EIFR = 0b00000001;
}

ISR(INT1_vect) {
	if(!(PORTC & 0b00100000)) { // checks LED 5
		if(!(PORTD & 0b01000000)) { // checks LED6 is on at PD7
			if(PORTD & 0b10000000) { // checks LED7 is off at PD7
				PORTD = 0b00111111; // turns on LED at PD7
			}
		}
	}
	wait(80); // switch debounce (waits to check switch pin status again - prevents the system perceiving double presses)
	EIFR = 0b00000010;
}

void wait(volatile int multiple, volatile char time_choice) {
	/* This subroutine calls others to create a delay.
		 Total delay = multiple*T, where T is in msec and is the delay created by the called function.
	
		Inputs: multiple = number of multiples to delay, where multiple is the number of times an actual delay loop is called.
		Outputs: None
	*/
	
	while (multiple > 0) {
		delay_T_msec_timer0(time_choice); 
		multiple--;
	}
} // end wait()

void delay_T_msec_timer0(volatile char choice) {
    //*** delay T ms **
    /* This subroutine creates a delay of T msec using TIMER0 with prescaler on clock, where, for a 16MHz clock:
    		for Choice = 1: T = 0.125 msec for prescaler set to 8 and count of 250 (preload counter with 5)
    		for Choice = 2: T = 1 msec for prescaler set to 64 and count of 250 (preload counter with 5)
    		for Choice = 3: T = 4 msec for prescaler set to 256 and count of 250 (preload counter with 5)
    		for Choice = 4: T = 16 msec for prescaler set to 1,024 and count of 250 (preload counter with 5)
			for Choice = Default: T = .0156 msec for no prescaler and count of 250 (preload counter with 5)
	
			Inputs: None
			Outputs: None
	*/
	
	TCCR0A = 0x00; // clears WGM00 and WGM01 (bits 0 and 1) to ensure Timer/Counter is in normal mode.
	TCNT0 = 0;  // preload value for testing on count = 250
	// preload value for alternate test on while loop: TCNT0 = 5;  // preload load TIMER0  (count must reach 255-5 = 250)
	
	switch ( choice ) { // choose prescaler
		case 1:
			TCCR0B = 0b00000010; //1<<CS01;	TCCR0B = 0x02; // Start TIMER0, Normal mode, crystal clock, prescaler = 8
		break;
		case 2:
			TCCR0B =  0b00000011; //1<<CS01 | 1<<CS00;	TCCR0B = 0x03;  // Start TIMER0, Normal mode, crystal clock, prescaler = 64
		break;
		case 3:
			TCCR0B = 0b00000100; //1<<CS02;	TCCR0B = 0x04; // Start TIMER0, Normal mode, crystal clock, prescaler = 256
		break; 
		case 4:
			TCCR0B = 0b00000101; //1<<CS02 | 1<<CS00; TCCR0B = 0x05; // Start TIMER0, Normal mode, crystal clock, prescaler = 1024
		break;
		default:
			TCCR0B = 0b00000001; //1<<CS00; TCCR0B = 0x01; Start TIMER0, Normal mode, crystal clock, no prescaler
		break;
	}
	
	while (TCNT0 < 0xFA); // exits when count = 250 (requires preload of 0 to make count = 250)
	// alternate test on while loop: while ((TIFR0 & (0x1<<TOV0)) == 0); // wait for TOV0 to roll over:
	// How does this while loop work?? See notes
	
	TCCR0B = 0x00; // Stop TIMER0
	//TIFR0 = 0x1<<TOV0;  // Alternate while loop: Clear TOV0 (note that this is a nonintuitive bit in that it is cleared by writing a 1 to it)
	
} // end delay_T_msec_timer0()

//LED state change function
void change_led_state(char allstates) {
	switch (allstates) {
		case 'A': // LED 0
			PORTC = 0b00111110;
			wait(200); // feeds into delay function
			break;
		case 'B': // LED 1
			PORTC = 0b00111101;
			wait(200);
			break;
		case 'C': // LED 2
			PORTC = 0b00111011;
			wait(200);
			break;
		case 'D': // LED 3
			PORTC = 0b00110111;
			wait(200);
			break;
		case 'E': // LED 4
			PORTC = 0b00101111;
			wait(200);
			break;
		case 'F': // LED 5
			PORTC = 0b00011111;
			wait(200);
			break;
		default: // functions as a Case 'G' in the pattern
			PORTC = 0b11111111;
			wait(200);
			break;
	}
}

void step_CCW()
{
	// This function advances the motor counter-clockwise one step.
	// Follow the full-wave stepping table in Stepper Motor Control.ppt for MEMS 1049 course.
	// phase1a = PORTD_7, phase1b = PORTD_6
	// phase2a = PORTD_5, phase2b = PORTD_4

	switch (phase_step) {
		case 1:
		// step to 2
		PORTD = 0b00010000;
		phase_step = 2;
		break;
		case 2:
		// step to 3
		PORTD = 0b01000000;
		phase_step = 3;
		break;
		case 3:
		// step to 4;
		PORTD = 0b00100000;
		phase_step = 4;
		break;
		case 4:
		// step to 1;
		PORTD = 0b10000000;
		phase_step = 1;
	break;  }
}// end step_CCW

void step_CW() {
	// This function advances the motor clockwise one step.  Follow the full-wave stepping table in Stepper Motor Control.ppt for MEMS 1049 course. Our stepper motor phases are assigned to Port pins as follows: phase1a = PORTD_7, phase1b = PORTD_6, phase2a = PORTD_5, phase2b = PORTD_4

	switch (phase_step) {
		
		case 1: // step to 4
		PORTD = 0b00100000;
		phase_step = 4;
		break;
		
		case 2: // step to 1
		PORTD = 0b10000000;
		phase_step = 1;
		break;
		
		case 3: // step to 2;
		PORTD = 0b00010000;
		phase_step = 2;
		break;
		
		case 4: // step to 3;
		PORTD = 0b01000000;
		phase_step = 3;
		break;
		
	}
}// end step_CW
