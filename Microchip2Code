/*
 * Atmega328Pproject.c
 *
 * Created: 7/10/2024
 * Author : Team 1
 */ 

#include <avr/io.h>
#include <avr/interrupt.h>

// Clock Frequencies
#define FREQ_CLOCK 1000000

// Function Declarations
void wait (volatile int multiple, volatile char time_choice);
void delay_T_msec_timer0 (char choice);
void change_led_state(char initialstate);
void step_CW (void);
void step_CCW (void);

// Global Variables
char sensorvalue = 0;// value read from analog sensor (0-255 since we'll only read the upper 8 bits of the 10-bit number)
volatile int number_of_msec = 200;
volatile char register_B_setting;
volatile char timer_preload;
int phase_step = 1; // We will use wave stepping, so the steps are numbered 1-4, then will repeat.

int main(void)
{
	// Data Registries - IO for MC2
		// Follows a practice of making unused pins to be input (safer)
	DDRB = 0b00000001;
		// set bit PB0 as output for the green LEDs
		// set bits PB2-1 as inputs for the 2 switches
	DDRC = 0b11111111;
		// set bits as 7 segment display might need to fix for display
	DDRD = 0b11110000;
		// set PD2 and PD3 for interupts
		// set bits PD7-PD4 as output for the stepper motor
	// Ports - Set or Clear Bits for stepper motor
	PORTB = 0b00000001; // set output bits on PORTB so that all outputs are off (wired as active low)
	PORTC = 0b11111111; // set output bits on PORTC so that input is off (wired as active low)
	PORTD = 0b11110000; // set output bits on PORTD so that all outputs are off (wired as active low)

	// Set up interrupts
	EICRA = 1 << ISC01 | 1 << ISC00 | 1 << ISC11 | 1 << ISC10; // triggers INT0 and INT1 on rising edge
	EIMSK = 1 << INT1 | 1 << INT0; // enable INT1 and INT0
	sei(); // enable global interrupt

	while(1)
	{

	}
}
