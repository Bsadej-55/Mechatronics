/*
 * This Code is for microchip 2
 * 
 * 
 */ 

#include <avr/io.h>

#define FREQ_CLK 1000000 //clock frequency set for internal clock

// Timer Functions
void wait(volatile int multiple, volatile char time_choice);
void delay_T_msec_timer0(char choice);

// Motor Functions
void step_CW( void );
void step_CCW( void );

// 7-Segment Display Functions
int send_to_MAX7221(unsigned char, unsigned char);
void wait(volatile int multiple);
void change_led_display1_state(int LEDstates1);
void change_led_display2_state(int LEDstates2);
void change_led_display3_state(int LEDstates3);

//** GLOBAL VARIABLES **
int phase_step = 1; // We will use wave stepping, so the steps are numbered 1-4, then will repeat.

int main(void)
{

	// Data Registries - IO
		// Follows a practice of making unused pins to be input (safer)
	DDRB = 0b00101101;
		// set bit PB0 as output for the GREEN LED
		// set bits PB4-1 as inputs for the 2 buttons
		// set bits PB5-3-2 as outputs for 7 segment display, pins SCK, MOSI, and SS as output
	DDRC = 0b00000000;
		// set bit PC0 as input for RED LED
	DDRD = 0b11110000;
		// set PD2 and PD3 for interupts
		// set bits PD7-PD4 as output for the stepper motor

	// Ports - Set or Clear Bits for stepper motor
	PORTB = 0b00000001; // set output bits on PORTB so that all outputs are off (wired as active low)
	PORTD = 0b11110000; // set output bits on PORTD so that all outputs are off (wired as active low)

	// Set up Main SPI
	SPCR = 0b01010001; // SPCR = 1<<SPE | 1<<MSTR | 1<<SPR0; // (SPIE = 0, SPE = 1, DORD = 0, MSTR = 1, CPOL = 0, CPHA = 0, SPR1 = 0, SPR0 = 1)
	// enable the SPI, set to Main mode 0, SCK = Fosc/16, lead with MSB
	
	send_to_MAX7221(0b00001001,0b00000011); //enable decoding mode
	send_to_MAX7221(0b00001011,0b00000011); //enable scan limit

	send_to_MAX7221(0b00001100,0b00000001); //turn on the display

	while (1) // 7-segment
	{
		for(int i = 1; i < 3; i++)
		{
			int LEDstates3 = i - 1;
			change_led_display3_state(LEDstates3);

			for(int j = 1; j < 6; j ++)
			{
				int LEDstates2 = j - 1;
				change_led_display2_state(LEDstates2);

				for(int k = 1; k < 10; k ++)
				{
					int LEDstates1 = k - 1;
					change_led_display1_state(LEDstates1);
					wait(1000);
				}
			}
		}
		
		send_to_MAX7221(0b00001100,0b00000000); //turn off
	} //end 7-segment LED Display while

	while (1) // pusher motor
	{
		if (!(PINB & 0b00000010)) // switch is pressed
		{
			// move 270 deg CW in 2 seconds & have led 1 (PB0) on
			for (int i = 0; i<1000; i++) {
				step_CCW();
				wait(5, 1);
			}
			
			wait(500, 1);	// wait 0.5 sec
			
			// move 90 deg CCW in 1 second & have led 2 (PB1) on
			for (int i = 0; i<1000; i++) {
				step_CW();
				wait(6,1);
			}
		}
	} // end motor while

return(0);
} // end main

void wait(volatile int multiple, volatile char time_choice) {
	/* This subroutine calls others to create a delay.
		 Total delay = multiple*T, where T is in msec and is the delay created by the called function.
	
		Inputs: multiple = number of multiples to delay, where multiple is the number of times an actual delay loop is called.
		Outputs: None
	*/
	
	while (multiple > 0) {
		delay_T_msec_timer0(time_choice); 
		multiple--;
	}
} // end wait

void delay_T_msec_timer0(volatile char choice) {
    //*** delay T ms **
    /* This subroutine creates a delay of T msec using TIMER0 with prescaler on clock, where, for a 16MHz clock:
    		for Choice = 1: T = 0.125 msec for prescaler set to 8 and count of 250 (preload counter with 5)
    		for Choice = 2: T = 1 msec for prescaler set to 64 and count of 250 (preload counter with 5)
    		for Choice = 3: T = 4 msec for prescaler set to 256 and count of 250 (preload counter with 5)
    		for Choice = 4: T = 16 msec for prescaler set to 1,024 and count of 250 (preload counter with 5)
			for Choice = Default: T = .0156 msec for no prescaler and count of 250 (preload counter with 5)
	
			Inputs: None
			Outputs: None
	*/
	
	TCCR0A = 0x00; // clears WGM00 and WGM01 (bits 0 and 1) to ensure Timer/Counter is in normal mode.
	TCNT0 = 0;  // preload value for testing on count = 250
	// preload value for alternate test on while loop: TCNT0 = 5;  // preload load TIMER0  (count must reach 255-5 = 250)
	
	switch ( choice ) { // choose prescaler
		case 1:
			TCCR0B = 0b00000010; //1<<CS01;	TCCR0B = 0x02; // Start TIMER0, Normal mode, crystal clock, prescaler = 8
		break;
		case 2:
			TCCR0B =  0b00000011; //1<<CS01 | 1<<CS00;	TCCR0B = 0x03;  // Start TIMER0, Normal mode, crystal clock, prescaler = 64
		break;
		case 3:
			TCCR0B = 0b00000100; //1<<CS02;	TCCR0B = 0x04; // Start TIMER0, Normal mode, crystal clock, prescaler = 256
		break; 
		case 4:
			TCCR0B = 0b00000101; //1<<CS02 | 1<<CS00; TCCR0B = 0x05; // Start TIMER0, Normal mode, crystal clock, prescaler = 1024
		break;
		default:
			TCCR0B = 0b00000001; //1<<CS00; TCCR0B = 0x01; Start TIMER0, Normal mode, crystal clock, no prescaler
		break;
	}
	
	while (TCNT0 < 0xFA); // exits when count = 250 (requires preload of 0 to make count = 250)
	// alternate test on while loop: while ((TIFR0 & (0x1<<TOV0)) == 0); // wait for TOV0 to roll over:
	// How does this while loop work?? See notes
	
	TCCR0B = 0x00; // Stop TIMER0
	//TIFR0 = 0x1<<TOV0;  // Alternate while loop: Clear TOV0 (note that this is a nonintuitive bit in that it is cleared by writing a 1 to it)
	
} // end delay_T_msec_timer0

void step_CCW()
{
	// This function advances the motor counter-clockwise one step.  Follow the full-wave stepping table in Stepper Motor Control.ppt for MEMS 1049 course. phase1a = PORTD_7, phase1b = PORTD_6
	// phase2a = PORTD_5, phase2b = PORTD_4

	switch (phase_step) {
		case 1:
		// step to 2
		PORTD = 0b00010000;
		phase_step = 2;
		break;
		case 2:
		// step to 3
		PORTD = 0b01000000;
		phase_step = 3;
		break;
		case 3:
		// step to 4;
		PORTD = 0b00100000;
		phase_step = 4;
		break;
		case 4:
		// step to 1;
		PORTD = 0b10000000;
		phase_step = 1;
	break;  }
}// end step_CCW

void step_CW() {
	// This function advances the motor clockwise one step.  Follow the full-wave stepping table in Stepper Motor Control.ppt for MEMS 1049 course. Our stepper motor phases are assigned to Port pins as follows: phase1a = PORTD_7, phase1b = PORTD_6, phase2a = PORTD_5, phase2b = PORTD_4

	switch (phase_step) {
		case 1:
		// step to 4
		PORTD = 0b00100000;
		phase_step = 4;
		break;
		case 2:
		// step to 1
		PORTD = 0b10000000;
		phase_step = 1;
		break;
		case 3:
		// step to 2;
		PORTD = 0b00010000;
		phase_step = 2;
		break;
		case 4:
		// step to 3;
		PORTD = 0b01000000;
		phase_step = 3;
	break;  }
}// end step_CW
