/*
 * MEMS1049_Lab9_BNS55.cpp
 *
 * Created: 7/14/2024 5:31:49 PM
 * Author : Brittany Sadej
 */ 

#include <avr/io.h>


int send_to_MAX7221(unsigned char, unsigned char);
void wait(volatile int multiple);


int main(void)
{
	//Setup
	DDRD=0xFF;
	DDRB = 0b00101100; //	DDRB = 1<<PORTB5 | 1<<PORTB3 | 1<<PORTB2;  // Set pins SCK, MOSI, and SS as output
	
	// Set up Main SPI
	SPCR = 0b01010001; // SPCR = 1<<SPE | 1<<MSTR | 1<<SPR0; // (SPIE = 0, SPE = 1, DORD = 0, MSTR = 1, CPOL = 0, CPHA = 0, SPR1 = 0, SPR0 = 1)
	// enable the SPI, set to Main mode 0, SCK = Fosc/16, lead with MSB
	
	send_to_MAX7221(0b00001001,0b00000011); //enable decoding mode
	send_to_MAX7221(0b00001011,0b00000010); //enable scan limit

	send_to_MAX7221(0b00001100,0b00000001); //turn on the display
	

	while (1)
	{
		for(int i=1; i<180; i++)
		{
			send_to_MAX7221(0b00001100,0b00000001); //turn on the display

			send_to_MAX7221(0b00000001,0b00000000);	//0 in binary on display 1
			send_to_MAX7221(0b00000010,0b00000111); //7 in binary on display 2
			wait(500);
			
			send_to_MAX7221(0b00000001,0b00000001); //1 in binary on display 1
			send_to_MAX7221(0b00000010,0b00000110); //6 in binary on display 2
			wait(500);
			
			send_to_MAX7221(0b00001100,0b00000000); //turn off
			wait(2000); //wait 2 seconds
		}
		
	}	//end while(1)
	
}	// end main



int send_to_MAX7221(unsigned char command, unsigned char data){
	PORTB = PORTB & 0b11111011; // Clear PB2, which is the SS bit, so that transmission can begin
	
	SPDR = command; // Send command
	while(!(SPSR & (1<<SPIF))); // Wait for transmission to finish
	
	SPDR = data; // Send data
	while(!(SPSR & (1<<SPIF))); // Wait for transmission to finish
	
	PORTB = PORTB | 0b00000100; // Return PB2 to 1, which is the SS bit, to end transmission
	
	return 0;
}

void wait(volatile int multiple)
{
	//this function creates a delay equal to multiple*T, where T is 1msec
	//assumes a 8MHz clock frequency (for a different clock, change the count exit value in while loop)
	while(multiple > 0) {
		TCCR0A = 0x00; // clears WGM00 and WGM01 (bits 0 and 1) to ensure Timer/Counter is in normal mode
		TCNT0 = 0; // Timer/Counter Register 0; preload value for testing on count = 250
		TCCR0B = 0b00000010; 
		// start TIMER0, normal mode, prescaler = 8!!!
		//basically, last 3 bits of TCCR0B determine the clock and prescaler, and 011 means prescaler of 64
		while (TCNT0 < 0xFA); //0xFA = 250, so it exits when count = 250 (requires preload of 0 to make count = 250)
		// change this value for clock other than 16MHz
		TCCR0B = 0x00; //Stop TIMER0
		multiple--;
	}
} //end wait()
