/*
 * This Code is only for the sensor
 * Turns LED off when sensor reaches a certain temperature
 * Set to 75, should be set higher for final code
 */ 

#include <avr/io.h>

#define FREQ_CLK 1000000 //clock frequency set for internal clock

// Timer Functions
void wait(volatile int multiple, volatile char time_choice);
void delay_T_msec_timer0(char choice);

// Temp Sensor I2C Functions
void i2c_init(void);
void i2c_start(void);
void i2c_stop(void);
void i2c_repeated_start(void);
void i2c_write_to_address(unsigned char address);
void i2c_read_from_address(unsigned char address);
void i2c_write_data(unsigned char data);
unsigned char i2c_read_data(unsigned char ack);

// Motor Functions
void step_CW( void );
void step_CCW( void );
void wait(volatile int multiple, volatile char time_choice);
void delay_T_msec_timer0(char choice);


//** GLOBAL VARIABLES **
unsigned char temp_high, temp_low, temp_C, temp_F, temp_tens,
temp_ones;
int phase_step = 1; // We will use wave stepping, so the steps are numbered 1-4, then will repeat.

int main(void)
{
	// Set up Main SPI
	SPCR = 0b01010001; // (SPIE = 0, SPE = 1, DORD = 0, MSTR = 1, CPOL = 0, CPHA = 0, SPR1 = 0, SPR0 = 1)
	// enable the SPI, set to Main mode 0, SCK = Fosc/16, lead with MSB

	// Data Registries - IO
		// Follows a practice of making unused pins to be input (safer)
	DDRB = 0b00000110;
		// set bits PB2-1 as output for relay
		// PB0 = input from Green LED
	DDRC = 0b00000011;
		// set PC0 as output for yellow LED (wired)
		// set PC1 as output for red LED (wired)
		// set PC2 as input for button
		// set PC4 as input for temperature sensor
		// set PC5 (ADC5) as input for analog for temperature sensor
	DDRD = 0b11110011;
		// set PD2 and PD3 for interupts
		// set bits PD7-PD4 as outputs for stepper motor

	// Ports - Set or Clear
	PORTB = 0b11111111;
		// set output bits on PORTB so that all outputs are off (wired as active low) might need to fix for relay
	PORTC = 0b00110011;
		// set output bits on PORTC so that all outputs are off (wired as active low) except PC5-4
		// Set SDA and SCK as pull up (PC5-4)
	PORTD = 0b11110011;
		// set output bits so that all outputs are off

	//Setup for I2C
	i2c_init();

	PORTD = 0b00000000; //Set 7 segment to on

    while (1) // temp sensor
    {
  		// Setting Resolution
  		i2c_start(); //sends start command
  		i2c_write_to_address(0x18); //addressing the MCP9808 address
  		i2c_write_data(0x08); //writing data, calling on the resolution register
  		//don't need a repeated start as we are addressing the same secondary with the same R/W config
  		i2c_write_data(0x00); //writing the data which defines the resolution, for higher res. (0.0625C) set to 0b00000011 or 0x03
  		i2c_stop(); // stops the write 

  		// Reading Data
  		i2c_start(); //sends start command
  		i2c_write_to_address(0x18); //addressing the MCP9808 adress
  		i2c_write_data(0x05); //writing the data, calling on the ambient temperature register
  		i2c_repeated_start(); //need the main to begin a new transfer without releasing the current transmission it is done
  		//issues a new start before the stop
  		i2c_read_from_address(0x18); //addressing where we are reading the data from
  		temp_high = i2c_read_data(1); //reading the upperbyte of the data
  		temp_low = i2c_read_data(0); //reading the lowerbyte of the data
  		i2c_stop();//stops the command
  
  
  		// Converting temperature from the two bits
  		temp_high = temp_high & 0x1F; // Take only the last 5
  		
  		//bits of the higher temperature
  		if((temp_high & 0x10) == 0x10)
  		{
  			temp_high = temp_high & 0x0F;
  			temp_C = 256 - (temp_high * 16.0 +
  			temp_low / 16.0);
  		}
  		else
  		{
  			temp_C = (temp_high * 16.0 + temp_low /
  			16.0);
  		}
  		temp_F = temp_C * 9.0/5.0 + 32; // Convert from C to F
  		temp_tens = temp_F /10; // Take the tens value from the temperature
  		temp_ones = temp_F %10; // Take the ones value from the temperature
  
  		wait(500,1);
  		
  		if ((temp_tens*10)+ temp_ones >= 75) //Change the 75 value to whatever value we want the hot dog to be at
  		{
  				
  			PORTD = 0b00000001; //turn LED off
  		}
  		else
  		{
  			PORTD = 0b00000000; //turn LED on
  		}
  		
	}//end temp sensor while

	while (1) // motor
	{
		if (!(PINB & 0b00000010))	// switch is pressed
		{
			while(1)
			{
				// move 270 deg CW in 2 seconds & have led 1 (PB0) on
				for (int i = 0; i<1000; i++) {
					step_CCW();
					wait(5, 1);
				}
				
				wait(500, 1);	// wait 0.5 sec
				
				// move 90 deg CCW in 1 second & have led 2 (PB1) on
				for (int i = 0; i<1000; i++) {
					step_CW();
					wait(6,1);
				}
			}
		}
	} // end motor while

return(0);
}//end void

//Timer Functions
void wait(volatile int multiple, volatile char time_choice) {
	/* This subroutine calls others to create a delay.
	 Total delay = multiple*T, where T is in msec and is the delay
	created by the called function.
	 Inputs: multiple = number of multiples to delay, where multiple is
	the number of times an actual delay loop is called.
	 Outputs: None
	*/
	while (multiple > 0) {
		delay_T_msec_timer0(time_choice);
		multiple--;
	}
} // end wait()
void delay_T_msec_timer0(volatile char choice) {
	 //*** delay T ms **
	 /* This subroutine creates a delay of T msec using TIMER0 with prescaler on
	clock, where, for a 16MHz clock:
	 for Choice = 1: T = 0.125 msec for prescaler set to 8 and count of
	250 (preload counter with 5)
	 for Choice = 2: T = 1 msec for prescaler set to 64 and count of 250
	(preload counter with 5)
	 for Choice = 3: T = 4 msec for prescaler set to 256 and count of 250
	(preload counter with 5)
	 for Choice = 4: T = 16 msec for prescaler set to 1,024 and count of
	250 (preload counter with 5)
	 for Choice = Default: T = .0156 msec for no prescaler and
	count of 250 (preload counter with 5)
	 Inputs: None
	 Outputs: None
	*/
	TCCR0A = 0x00; // clears WGM00 and WGM01 (bits 0 and 1) to ensure Timer/Counter is in normal mode.
	TCNT0 = 0; // preload value for testing on count = 250
	// preload value for alternate test on while loop: TCNT0 = 5; // preload ;oad TIMER0 (count must reach 255-5 = 250)
	switch ( choice ) { // choose prescaler
	 case 1:
	 TCCR0B = 0b00000010; //1<<CS01; TCCR0B = 0x02; // Start TIMER0, Normal mode, crystal clock, prescaler = 8
	 break;
	 case 2:
	 TCCR0B = 0b00000011; //1<<CS01 | 1<<CS00; TCCR0B = 0x03; // Start TIMER0, Normal mode, crystal clock, prescaler = 64
	 break;
	 case 3:
	 TCCR0B = 0b00000100; //1<<CS02; TCCR0B = 0x04; // Start TIMER0, Normal mode, crystal clock, prescaler = 256
	 break;
	 case 4:
	 TCCR0B = 0b00000101; //1<<CS02 | 1<<CS00; TCCR0B = 0x05; // Start TIMER0, Normal mode, crystal clock, prescaler = 1024
	 break;
	 default:
	 TCCR0B = 0b00000001; //1<<CS00; TCCR0B = 0x01; Start TIMER0, Normal mode, crystal clock, no prescaler
	 break;
	}
	while (TCNT0 < 0xFA); // exits when count = 250 (requires preload of 0 to make count = 250)
		// alternate test on while loop: while ((TIFR0 & (0x1<<TOV0)) == 0); // wait for TOV0 to roll over:
		// How does this while loop work?? See notes
		TCCR0B = 0x00; // Stop TIMER0
		//TIFR0 = 0x1<<TOV0; // Alternate while loop: Clear TOV0 (note that this is a nonintuitive bit in that it is cleared by writing a 1 to it)
		} // end delay_T_msec_timer0()
		//I2C Functions
		void i2c_init(void) { // initialize i2c
		TWSR = 0b00000000; // prescaler is set to 1
		TWBR = 72; // Put 72 into TWBR to define SCL frequency as 100kHz for 16MHz oscillator
		TWCR = 0b00000100; // TWEN = 1 (enable TWI)
}
void i2c_start(void) { // send start command
	//while (!(TWCR & (1<<TWINT))); //while (!(TWCR & 0b10000000)); // wait for idle condition -- TWINT bit must be high to proceed -- not needed if single main is used
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN); //TWCR | 0b10100100; // initiate START condition -- write 1 to TWINT to clear it and initiate action, set TWSTA bit, set TWEN bit
	while (!(TWCR & (1<<TWINT))); //while (!(TWCR & 0b10000000)); // wait for action to finish (poll TWINT bit)
	// if ((TWSR & 0xF8) != START) // error checking -- need to predefine START= 0x08 and ERROR() function.
	// ERROR();
}
void i2c_stop(void) { // send stop command
	while (!(TWCR & (1<<TWINT))); //while (!(TWCR & 0b10000000)) ; // wait for action to finish (poll TWINT bit)
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO); //TWCR = TWCR | 0b10010100;
	 // initiate STOP condition -- write 1 to TWINT to clear it and initiate action, set TWSTO bit and set TWEN bit
}
void i2c_repeated_start(void) {
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN); //TWCR | 0b10100100; // initiate START condition -- write 1 to TWINT to clear it and initiate action, set TWSTA bit, set TWEN bit
	while (!(TWCR & (1<<TWINT))); //while (!(TWCR & 0b10000000)); // wait for action to finish (poll TWINT bit)
	// if ((TWSR & 0xF8) != START) // error checking -- need to predefine START = 0x10 and ERROR() function.
	// ERROR();
}
void i2c_write_to_address( unsigned char address) { //Write an address byte to the I2C2 bus in form of SLA_W (address to write to)
	unsigned char SLA_W = address<<1; // create SLA_W byte by shifting address and leaving R/W bit clear
	while (!(TWCR & (1<<TWINT))); //while (!(TWCR & 0b10000000)) ; // wait for idle condition -- TWINT bit must be high to proceed
		TWDR = SLA_W; // Load TWDR with address plus R/W bit
		TWCR = (1<<TWINT) | (1<<TWEN); //TWCR = TWCR | 0b10000100; // initiate Write -- write 1 to TWINT to clear it and initiate action, and set TWEN
	while (!(TWCR & (1<<TWINT))); //while (!(TWCR & 0b10000000)) ; // wait for action to finish (poll TWINT bit)
	// if ((TWSR & 0xF8) != MT_SLA_ACK) // error checking -- need to predefine MT_SLA_ACK and ERROR() function depending on possible outcomes: 0x18, 0x20, or 0x38.
	//ERROR();
}
void i2c_read_from_address(unsigned char address) { //Write an address byte to the I2C bus in form of SLA_R (address to read from)
	unsigned char SLA_R = address<<1 | 1; // create SLA_R byte by shifting address and setting R/W bit
	while (!(TWCR & (1<<TWINT))); //while (!(TWCR & 0b10000000)) ; // wait for idle condition -- TWINT bit must be high to proceed
		TWDR = SLA_R; // Load TWDR with address plus R/W bit
		TWCR = (1<<TWINT) | (1<<TWEN); //TWCR = TWCR | 0b10000100; // initiate Write -- write 1 to TWINT to clear it and initiate action, and set TWEN
	while (!(TWCR & (1<<TWINT))); //while (!(TWCR & 0b10000000)) ; // wait for action to finish (poll TWINT bit)
	// if ((TWSR & 0xF8) != MR_SLA_ACK) // error checking -- need to predefine MR_SLA_ACK and ERROR() function depending on possible outcomes: 0x38, 0x40, or 0x48.
	//ERROR();
}
void i2c_write_data( unsigned char data) { //Write data byte to the I2C2 bus
	while (!(TWCR & (1<<TWINT))); //while (!(TWCR & 0b10000000)) ; // wait for idle condition -- TWINT bit must be high to proceed
		TWDR = data; // Load TWDR with data to be sent
		TWCR = (1<<TWINT) | (1<<TWEN); //TWCR = TWCR | 0b10000100; // initiate Write -- write 1 to TWINT to clear it and initiate action, and set TWEN
	while (!(TWCR & (1<<TWINT))); //while (!(TWCR & 0b10000000)) ; // wait for action to finish (poll TWINT bit)
	// if ((TWSR & 0xF8) != MT_DATA_ACK) // error checking -- need to predefine MT_DATA_ACK and ERROR() function depending on possible outcomes: 0x28 or 0x30.
	//ERROR();
}
unsigned char i2c_read_data(unsigned char ACK) { //Read a byte of data from a secondary on the I2C2 bus
	unsigned char data;
	while (!(TWCR & (1<<TWINT))); // wait for idle condition -- TWINT bit must be high to proceed
		if (ACK) // check for whether ACK or NO_ACK should be sent upon receipt of byte from secondary
			TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN); // initiate Read with ACK -- write 1 to TWINT to clear it and initiate action, and set TWEA and TWEN
		else
			TWCR = (1<<TWINT) | (1<<TWEN); // initiate Read with NO_ACK-- write 1 to TWINT to clear it and initiate action, and set TWEN
	while (!(TWCR & (1<<TWINT))); // wait for action to finish (poll TWINT bit)
		data = TWDR; // read the received data from secondary
	return(data);
}
